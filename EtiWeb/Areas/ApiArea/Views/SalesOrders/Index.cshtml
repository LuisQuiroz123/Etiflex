@model IEnumerable<EtiWeb.Data.SalesOrderViewModel>

@{
    Layout = "_Layout";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable@14.3.0/dist/handsontable.full.min.css">
<script src="https://cdn.jsdelivr.net/npm/handsontable@14.3.0/dist/handsontable.full.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />

<style>
    body {
        background-color: #f3f4f6;
        color: #111827;
    }

    h1, h2 {
        color: #111827;
    }

    #ordersTable {
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 14px rgba(0,0,0,0.2);
        background-color: #ffffff;
    }

    .handsontable th {
        background-color: #e2e8f0 !important;
        font-weight: 600;
        text-align: center !important;
        border-bottom: 2px solid #cbd5e1 !important;
    }

    .handsontable td {
        font-size: 0.9rem;
        color: #111827;
        border-color: #cbd5e1 !important;
        background-color: #ffffff;
    }

        .handsontable tr:hover td, .handsontable tr.currentRow td, .handsontable td.currentCol {
            background-color: #bae6fd !important;
        }

    #exportExcel {
        font-size: 0.75rem;
        font-weight: 600;
        padding: 0.3rem 0.6rem;
        border-radius: 5px;
        border: none;
        cursor: pointer;
        color: white;
        background-color: #16a34a;
        transition: all 0.2s ease-in-out;
    }

        #exportExcel:hover {
            background-color: #15803d;
        }

    #totalsTable {
        background-color: #e2e8f0;
        font-weight: bold;
        border-collapse: collapse;
        width: 100%;
        table-layout: fixed;
        margin-top: 4px;
    }

        #totalsTable td {
            padding: 4px 8px;
            border: 1px solid #cbd5e1;
            color: #1e293b;
            text-align: right;
        }

            #totalsTable td:first-child {
                text-align: left;
            }

    .expand-btn {
        cursor: pointer;
        color: #2563eb;
        font-weight: bold;
    }

    .subtable-container {
        margin-top: 4px;
        margin-bottom: 10px;
        border: 1px solid #cbd5e1;
        border-radius: 6px;
        overflow: auto;
    }

    .order-status-pending {
        background-color: #fef3c7;
    }

    .order-status-completed {
        background-color: #d1fae5;
    }

    .order-status-cancelled {
        background-color: #fee2e2;
    }
</style>

<div class="container mx-auto p-6">
    <h1 class="text-2xl font-bold mb-4"><i class="fa-solid fa-file-invoice-dollar" style="color:#2563eb; margin-right:6px;"></i> Órdenes de Venta</h1>

    <div class="mb-2">
        <button id="expandAll" class="bg-blue-500 text-white p-2 rounded" style="background:darkblue">Expandir Todas</button>
        <button id="collapseAll" class="bg-gray-500 text-white p-2 rounded ml-2" style="background-color:darkblue">Colapsar Todas</button>
    </div>

    <div style="position: relative;">
        <div id="ordersTable" style="width: 100%; height: 500px;"></div>

        <table id="totalsTable">
            <tr>
                <td>Total Órdenes:</td>
                <td id="totalOrders">0</td>
                <td>Total Monto:</td>
                <td id="totalAmount">0</td>
            </tr>
        </table>
    </div>

    <div class="mt-4 flex justify-end">
        <button id="exportExcel">💾 Descargar Excel</button>
    </div>
</div>

<script>
    const orders = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model));
    const container = document.getElementById('ordersTable');

    const data = orders.map(o => ({
        expand: '+',
        reference: o.ReferenceAtCustomer,
        productId: o.ProductId,
        quantity: o.OrderQuantity,
        unitPrice: o.UnitPrice,
        amount: o.TransactionAmount,
        method: o.TransactionMethod,
        state: o.OrderState,
        date: new Date(o.CreatedAt).toISOString().split('T')[0],
        lines: o.Lines
    }));

    const hot = new Handsontable(container, {
        data: data,
        colHeaders: ["", "Referencia", "Producto", "Cantidad", "Precio Unitario", "Importe", "Método Transacción", "Status", "Fecha"],
        columns: [
            { data: "expand", renderer: expandRenderer, width: 40 },
            { data: "reference", readOnly: true, width: 400 }, 
            { data: "productId", readOnly: true },
            { data: "quantity", type: "numeric", readOnly: true },
            { data: "unitPrice", type: "numeric", readOnly: true, numericFormat: { pattern: "$0,0.00" } },
            { data: "amount", type: "numeric", readOnly: true, numericFormat: { pattern: "$0,0.00" } },
            { data: "method", readOnly: true },
            { data: "state", readOnly: true },
            { data: "date", readOnly: true }
        ],
        stretchH: "all",
        height: "500px",
        filters: true,
        dropdownMenu: true,
        manualColumnMove: true,
        manualColumnResize: true,
        columnSorting: true,
        licenseKey: "non-commercial-and-evaluation",
        cells: function (row, col) {
            const cellProperties = {};
            const state = this.instance.getDataAtRowProp(row, 'state');
            if (state === 'Pendiente') cellProperties.className = 'order-status-pending';
            if (state === 'Completada') cellProperties.className = 'order-status-completed';
            if (state === 'Cancelada') cellProperties.className = 'order-status-cancelled';
            return cellProperties;
        }
    });

    function expandRenderer(instance, td, row, col, prop, value, cellProperties) {
        td.innerHTML = `<span class="expand-btn">${value}</span>`;
        td.style.textAlign = 'center';
        td.style.cursor = 'pointer';
        td.onclick = () => toggleSubtable(row);
        return td;
    }

    function toggleSubtable(rowIndex) {
        const rowData = hot.getSourceDataAtRow(rowIndex);
        if (!rowData.lines || rowData.lines.length === 0) return;

        const containerId = `subtable-${rowIndex}`;
        const existing = document.getElementById(containerId);

        if (existing) {
            existing.remove();
        } else {
            const td = hot.getCell(rowIndex, 1);
            const div = document.createElement('div');
            div.id = containerId;
            div.className = 'subtable-container';
            td.appendChild(div);

            new Handsontable(div, {
                data: rowData.lines.map(l => ({
                    description: l.Description,
                    quantity: l.Quantity,
                    unitPrice: l.UnitPrice,
                    total: l.Total
                })),
                colHeaders: ["Descripción", "Cantidad", "Precio Unitario", "Importe"],
                columns: [
                    { data: "description", readOnly: true, width: 80 },
                    { data: "quantity", type: "numeric", readOnly: true },
                    { data: "unitPrice", type: "numeric", numericFormat: { pattern: "$0,0.00" }, readOnly: true },
                    { data: "total", type: "numeric", numericFormat: { pattern: "$0,0.00" }, readOnly: true }
                ],
                stretchH: "all",
                width: '100%',
                height: Math.min(250, rowData.lines.length * 25 + 30),
                readOnly: true,
                fixedColumnsLeft: 0,
                colHeaders: true,
                licenseKey: "non-commercial-and-evaluation"
            });
        }
    }

    function expandAll() { for (let i = 0; i < data.length; i++) toggleSubtable(i); }
    function collapseAll() { for (let i = 0; i < data.length; i++) { const el = document.getElementById(`subtable-${i}`); if (el) el.remove(); } }

    document.getElementById('expandAll').addEventListener('click', expandAll);
    document.getElementById('collapseAll').addEventListener('click', collapseAll);

    function updateTotals() {
        const totalOrders = orders.length;
        const totalAmount = orders.reduce((sum, o) => sum + (o.TransactionAmount || 0), 0);
        document.getElementById('totalOrders').innerText = totalOrders;
        document.getElementById('totalAmount').innerText = totalAmount.toLocaleString("es-MX", { style: "currency", currency: "MXN" });
    }

    updateTotals();

    document.getElementById('exportExcel').addEventListener('click', () => {
        const exportPlugin = hot.getPlugin('exportFile');
        exportPlugin.downloadFile('csv', { filename: 'SalesOrders', columnHeaders: true, bom: true });
    });
</script>
